{"ast":null,"code":"import * as React from 'react';\n\nfunction queriesDidChange(prevQueries, nextQueries) {\n  if (nextQueries === prevQueries) return false;\n  const nextQueriesArr = Object.values(nextQueries);\n  const prevQueriesArr = Object.values(prevQueries);\n  if (nextQueriesArr.length !== prevQueriesArr.length) return true;\n  if (nextQueriesArr.some((q, i) => q !== prevQueriesArr[i])) return true;\n  const prevKeys = Object.keys(prevQueries);\n  return Object.keys(nextQueries).some((n, i) => n !== prevKeys[i]);\n}\n\nfunction _ref(curr, key) {\n  curr.matches[key] = false;\n  curr.mediaQueries[key] = {};\n  return curr;\n}\n\nfunction init(queries) {\n  const queryKeys = Object.keys(queries);\n  /* istanbul ignore next */\n\n  if (typeof window === 'undefined') return queryKeys.reduce(_ref, {\n    mediaQueries: {},\n    matches: {}\n  });\n  return queryKeys.reduce((state, name) => {\n    const mql = window.matchMedia(queries[name]);\n    state.mediaQueries[name] = mql;\n    state.matches[name] = mql.matches;\n    return state;\n  }, {\n    mediaQueries: {},\n    matches: {}\n  });\n}\n\nfunction reducer(state, action) {\n  function _ref2(prev, key) {\n    prev[key] = state.mediaQueries[key].matches;\n    return prev;\n  }\n\n  switch (action.type) {\n    case 'updateMatches':\n      return {\n        matches: Object.keys(state.mediaQueries).reduce(_ref2, {}),\n        mediaQueries: state.mediaQueries\n      };\n\n    case 'setQueries':\n      return init(action.queries);\n  }\n}\n/**\r\n * A hook that returns a [`MediaQueryMatches`](#mediaquerymatches) object which will\r\n * tell you if specific media queries matched, all media queries matched, or\r\n * any media queries matched. Matches in this hook will always return `false` when\r\n * rendering on the server.\r\n *\r\n * @param queryMap The media queries you want to match against e.g. `{screen: \"screen\", width: \"(min-width: 12em)\"}`\r\n */\n\n\nexport function useMediaQueries(queryMap) {\n  const prevQueries = React.useRef(queryMap);\n  const [state, dispatch] = React.useReducer(reducer, queryMap, init);\n  React.useEffect(() => {\n    if (queriesDidChange(queryMap, prevQueries.current)) {\n      dispatch({\n        type: 'setQueries',\n        queries: queryMap\n      });\n      prevQueries.current = queryMap;\n    }\n  }, [queryMap]);\n\n  function _ref3() {\n    return dispatch({\n      type: 'updateMatches'\n    });\n  }\n\n  function _ref4(mq) {\n    const callback = _ref3;\n    if (typeof mq.addListener !== 'undefined') mq.addListener(callback);else mq.addEventListener('change', callback);\n    return callback;\n  }\n\n  React.useEffect(() => {\n    const queries = Object.values(state.mediaQueries);\n    const callbacks = queries.map(_ref4);\n\n    function _ref5(mq, i) {\n      if (typeof mq.addListener !== 'undefined') mq.removeListener(callbacks[i]);else mq.removeEventListener('change', callbacks[i]);\n    }\n\n    return () => {\n      queries.forEach(_ref5);\n    };\n  }, [state.mediaQueries]);\n  const {\n    matches\n  } = state;\n  const matchValues = React.useMemo(() => Object.values(matches), [matches]);\n  return {\n    matches,\n    matchesAny: matchValues.some(Boolean),\n    matchesAll: matchValues.length > 0 && matchValues.every(Boolean)\n  };\n}\n/**\r\n * A hook that returns `true` if the media query matched and `false` if not. This\r\n * hook will always return `false` when rendering on the server.\r\n *\r\n * @param query The media query you want to match against e.g. `\"only screen and (min-width: 12em)\"`\r\n */\n\nexport function useMediaQuery(query) {\n  return useMediaQueries(getObj(query)).matchesAll;\n}\nconst cache = {};\n\nfunction getObj(query) {\n  if (cache[query] === void 0) cache[query] = {\n    default: query\n  };\n  return cache[query];\n}","map":{"version":3,"names":["React","queriesDidChange","prevQueries","nextQueries","nextQueriesArr","Object","values","prevQueriesArr","length","some","q","i","prevKeys","keys","n","_ref","curr","key","matches","mediaQueries","init","queries","queryKeys","window","reduce","state","name","mql","matchMedia","reducer","action","_ref2","prev","type","useMediaQueries","queryMap","useRef","dispatch","useReducer","useEffect","current","_ref3","_ref4","mq","callback","addListener","addEventListener","callbacks","map","_ref5","removeListener","removeEventListener","forEach","matchValues","useMemo","matchesAny","Boolean","matchesAll","every","useMediaQuery","query","getObj","cache","default"],"sources":["C:/Users/loicg/Documents/GitHub/s-app/node_modules/@react-hook/media-query/dist/module/index.js"],"sourcesContent":["import * as React from 'react';\r\n\r\nfunction queriesDidChange(prevQueries, nextQueries) {\r\n  if (nextQueries === prevQueries) return false;\r\n  const nextQueriesArr = Object.values(nextQueries);\r\n  const prevQueriesArr = Object.values(prevQueries);\r\n  if (nextQueriesArr.length !== prevQueriesArr.length) return true;\r\n  if (nextQueriesArr.some((q, i) => q !== prevQueriesArr[i])) return true;\r\n  const prevKeys = Object.keys(prevQueries);\r\n  return Object.keys(nextQueries).some((n, i) => n !== prevKeys[i]);\r\n}\r\n\r\nfunction _ref(curr, key) {\r\n  curr.matches[key] = false;\r\n  curr.mediaQueries[key] = {};\r\n  return curr;\r\n}\r\n\r\nfunction init(queries) {\r\n  const queryKeys = Object.keys(queries);\r\n  /* istanbul ignore next */\r\n\r\n  if (typeof window === 'undefined') return queryKeys.reduce(_ref, {\r\n    mediaQueries: {},\r\n    matches: {}\r\n  });\r\n  return queryKeys.reduce((state, name) => {\r\n    const mql = window.matchMedia(queries[name]);\r\n    state.mediaQueries[name] = mql;\r\n    state.matches[name] = mql.matches;\r\n    return state;\r\n  }, {\r\n    mediaQueries: {},\r\n    matches: {}\r\n  });\r\n}\r\n\r\nfunction reducer(state, action) {\r\n  function _ref2(prev, key) {\r\n    prev[key] = state.mediaQueries[key].matches;\r\n    return prev;\r\n  }\r\n\r\n  switch (action.type) {\r\n    case 'updateMatches':\r\n      return {\r\n        matches: Object.keys(state.mediaQueries).reduce(_ref2, {}),\r\n        mediaQueries: state.mediaQueries\r\n      };\r\n\r\n    case 'setQueries':\r\n      return init(action.queries);\r\n  }\r\n}\r\n/**\r\n * A hook that returns a [`MediaQueryMatches`](#mediaquerymatches) object which will\r\n * tell you if specific media queries matched, all media queries matched, or\r\n * any media queries matched. Matches in this hook will always return `false` when\r\n * rendering on the server.\r\n *\r\n * @param queryMap The media queries you want to match against e.g. `{screen: \"screen\", width: \"(min-width: 12em)\"}`\r\n */\r\n\r\n\r\nexport function useMediaQueries(queryMap) {\r\n  const prevQueries = React.useRef(queryMap);\r\n  const [state, dispatch] = React.useReducer(reducer, queryMap, init);\r\n  React.useEffect(() => {\r\n    if (queriesDidChange(queryMap, prevQueries.current)) {\r\n      dispatch({\r\n        type: 'setQueries',\r\n        queries: queryMap\r\n      });\r\n      prevQueries.current = queryMap;\r\n    }\r\n  }, [queryMap]);\r\n\r\n  function _ref3() {\r\n    return dispatch({\r\n      type: 'updateMatches'\r\n    });\r\n  }\r\n\r\n  function _ref4(mq) {\r\n    const callback = _ref3;\r\n    if (typeof mq.addListener !== 'undefined') mq.addListener(callback);else mq.addEventListener('change', callback);\r\n    return callback;\r\n  }\r\n\r\n  React.useEffect(() => {\r\n    const queries = Object.values(state.mediaQueries);\r\n    const callbacks = queries.map(_ref4);\r\n\r\n    function _ref5(mq, i) {\r\n      if (typeof mq.addListener !== 'undefined') mq.removeListener(callbacks[i]);else mq.removeEventListener('change', callbacks[i]);\r\n    }\r\n\r\n    return () => {\r\n      queries.forEach(_ref5);\r\n    };\r\n  }, [state.mediaQueries]);\r\n  const {\r\n    matches\r\n  } = state;\r\n  const matchValues = React.useMemo(() => Object.values(matches), [matches]);\r\n  return {\r\n    matches,\r\n    matchesAny: matchValues.some(Boolean),\r\n    matchesAll: matchValues.length > 0 && matchValues.every(Boolean)\r\n  };\r\n}\r\n/**\r\n * A hook that returns `true` if the media query matched and `false` if not. This\r\n * hook will always return `false` when rendering on the server.\r\n *\r\n * @param query The media query you want to match against e.g. `\"only screen and (min-width: 12em)\"`\r\n */\r\n\r\nexport function useMediaQuery(query) {\r\n  return useMediaQueries(getObj(query)).matchesAll;\r\n}\r\nconst cache = {};\r\n\r\nfunction getObj(query) {\r\n  if (cache[query] === void 0) cache[query] = {\r\n    default: query\r\n  };\r\n  return cache[query];\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}